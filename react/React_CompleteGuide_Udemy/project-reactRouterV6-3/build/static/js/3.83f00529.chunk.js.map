{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","navigate","useNavigate","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,KAAO,wB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2B,qBCA3DD,EAAOC,QAAU,CAAC,SAAW,gC,2FCmBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAK,UAC1B,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAI,CAACJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAAK,+BAKtD,E,iBCmCeC,EArCG,SAACR,GACjB,IAXkBS,EAAQC,EAWpBC,EAAWC,cACXC,EAAWC,cAIXC,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAErCC,GAlBYV,EAkBcT,EAAMS,OAlBZC,EAkBoBK,EAjBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,CAExC,KAmBA,OACE,eAAC,WAAQ,WACP,qBAAKN,UAAWC,IAAQqB,QAAQ,SAC9B,yBAAQC,QATe,WAC3Bb,EAASE,EAASY,SAAU,CAC1BR,OAAO,SAAD,OAAWF,EAAqB,OAAS,QAEnD,EAK4C,kBAC9BA,EAAqB,aAAe,iBAG9C,oBAAId,UAAWC,IAAQwB,KAAK,SACzBP,EAAaQ,KAAI,SAACC,GAAK,OACtB,cAAC,EAAS,CAERrB,GAAIqB,EAAMrB,GACVF,OAAQuB,EAAMvB,OACdD,KAAMwB,EAAMxB,MAHPwB,EAAMrB,GAIX,QAKZ,E,yBCpCesB,EAXO,WACpB,OACE,sBAAK5B,UAAWC,IAAQ4B,SAAS,UAC/B,iDACA,cAAC,IAAI,CAAC7B,UAAU,MAAMK,GAAG,aAAY,2BAK3C,E,gBCwBeyB,UA7BG,WAChB,MAA2DC,YACzDC,KACA,GAFMC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAAcC,EAAY,EAAlBC,KAAoBC,EAAK,EAALA,MASjD,OAJAC,qBAAU,WACRL,GACF,GAAG,CAACA,IAEW,YAAXC,EAEA,qBAAKlC,UAAU,WAAU,SACvB,cAACuC,EAAA,EAAc,MAKjBF,EACK,mBAAGrC,UAAU,mBAAkB,SAAEqC,IAG3B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAItD,cAAC,EAAS,CAAChC,OAAQ2B,IAHjB,cAAC,EAAa,GAIzB,C","file":"static/js/3.83f00529.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item___B6NQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__2shCo\",\"sorting\":\"QuoteList_sorting__1OKcH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1kB-T\"};","import { Link } from 'react-router-dom';\n\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className='btn' to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    navigate(location.pathname, {\n      search: `?sort=${isSortingAscending ? 'desc' : 'asc'}`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? 'Descending' : 'Ascending'}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\n\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from 'react';\n\nimport QuoteList from '../components/quotes/QuoteList';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../lib/api';\n\nconst AllQuotes = () => {\n  const { sendRequest, status, data: loadedQuotes, error } = useHttp(\n    getAllQuotes,\n    true\n  );\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className='centered focused'>{error}</p>;\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />;\n  }\n\n  return <QuoteList quotes={loadedQuotes} />;\n};\n\nexport default AllQuotes;\n"],"sourceRoot":""}